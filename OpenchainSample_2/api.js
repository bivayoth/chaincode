var request = require('request');
var promise = require('bluebird');
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var BlockchainInfo = (function () {
    function BlockchainInfo() {
    }
    return BlockchainInfo;
})();
exports.BlockchainInfo = BlockchainInfo;
var Block = (function () {
    function Block() {
    }
    return Block;
})();
exports.Block = Block;
var Transaction = (function () {
    function Transaction() {
    }
    return Transaction;
})();
exports.Transaction = Transaction;
var Transaction;
(function (Transaction) {
    (function (TypeEnum) {
        TypeEnum[TypeEnum["UNDEFINED"] = 'UNDEFINED'] = "UNDEFINED";
        TypeEnum[TypeEnum["CHAINCODE_NEW"] = 'CHAINCODE_NEW'] = "CHAINCODE_NEW";
        TypeEnum[TypeEnum["CHAINCODE_UPDATE"] = 'CHAINCODE_UPDATE'] = "CHAINCODE_UPDATE";
        TypeEnum[TypeEnum["CHAINCODE_EXECUTE"] = 'CHAINCODE_EXECUTE'] = "CHAINCODE_EXECUTE";
        TypeEnum[TypeEnum["CHAINCODE_TERMINATE"] = 'CHAINCODE_TERMINATE'] = "CHAINCODE_TERMINATE";
    })(Transaction.TypeEnum || (Transaction.TypeEnum = {}));
    var TypeEnum = Transaction.TypeEnum;
})(Transaction = exports.Transaction || (exports.Transaction = {}));
var ChaincodeID = (function () {
    function ChaincodeID() {
    }
    return ChaincodeID;
})();
exports.ChaincodeID = ChaincodeID;
var State = (function () {
    function State() {
    }
    return State;
})();
exports.State = State;
var ChaincodeSpec = (function () {
    function ChaincodeSpec() {
    }
    return ChaincodeSpec;
})();
exports.ChaincodeSpec = ChaincodeSpec;
var ChaincodeSpec;
(function (ChaincodeSpec) {
    (function (TypeEnum) {
        TypeEnum[TypeEnum["UNDEFINED"] = 'UNDEFINED'] = "UNDEFINED";
        TypeEnum[TypeEnum["GOLANG"] = 'GOLANG'] = "GOLANG";
        TypeEnum[TypeEnum["NODE"] = 'NODE'] = "NODE";
    })(ChaincodeSpec.TypeEnum || (ChaincodeSpec.TypeEnum = {}));
    var TypeEnum = ChaincodeSpec.TypeEnum;
})(ChaincodeSpec = exports.ChaincodeSpec || (exports.ChaincodeSpec = {}));
var ChaincodeDeploymentSpec = (function () {
    function ChaincodeDeploymentSpec() {
    }
    return ChaincodeDeploymentSpec;
})();
exports.ChaincodeDeploymentSpec = ChaincodeDeploymentSpec;
var ChaincodeInvocationSpec = (function () {
    function ChaincodeInvocationSpec() {
    }
    return ChaincodeInvocationSpec;
})();
exports.ChaincodeInvocationSpec = ChaincodeInvocationSpec;
var ChaincodeMessage = (function () {
    function ChaincodeMessage() {
    }
    return ChaincodeMessage;
})();
exports.ChaincodeMessage = ChaincodeMessage;
var Error = (function () {
    function Error() {
    }
    return Error;
})();
exports.Error = Error;
var OK = (function () {
    function OK() {
    }
    return OK;
})();
exports.OK = OK;
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
})();
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
})();
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        // TODO: support oauth
    };
    return OAuth;
})();
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (requestOptions) {
        // Do nothing
    };
    return VoidAuth;
})();
var StateApi = (function () {
    function StateApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'http://127.0.0.1:3000';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    StateApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    StateApi.prototype.getChaincodeState = function (chaincodeID, key) {
        var path = this.url + this.basePath + '/state/{chaincodeID}/{key}'
            .replace('{' + 'chaincodeID' + '}', String(chaincodeID))
            .replace('{' + 'key' + '}', String(key));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'chaincodeID' is set
        if (!chaincodeID) {
            throw new Error('Missing required parameter chaincodeID when calling getChaincodeState');
        }
        // verify required parameter 'key' is set
        if (!key) {
            throw new Error('Missing required parameter key when calling getChaincodeState');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return StateApi;
})();
exports.StateApi = StateApi;
var BlockchainApi = (function () {
    function BlockchainApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'http://127.0.0.1:3000';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    BlockchainApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    BlockchainApi.prototype.getChain = function () {
        var path = this.url + this.basePath + '/chain';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return BlockchainApi;
})();
exports.BlockchainApi = BlockchainApi;
var BlockApi = (function () {
    function BlockApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'http://127.0.0.1:3000';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    BlockApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    BlockApi.prototype.getBlock = function (block) {
        var path = this.url + this.basePath + '/chain/blocks/{Block}'
            .replace('{' + 'Block' + '}', String(block));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'block' is set
        if (!block) {
            throw new Error('Missing required parameter block when calling getBlock');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return BlockApi;
})();
exports.BlockApi = BlockApi;
var DevopsApi = (function () {
    function DevopsApi(url, basePathOrUsername, password, basePath) {
        this.url = url;
        this.basePath = 'http://127.0.0.1:3000';
        this.defaultHeaders = {};
        this.authentications = {
            'default': new VoidAuth()
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    DevopsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    DevopsApi.prototype.chaincodeBuild = function (chaincodeSpec) {
        var path = this.url + this.basePath + '/devops/build';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'chaincodeSpec' is set
        if (!chaincodeSpec) {
            throw new Error('Missing required parameter chaincodeSpec when calling chaincodeBuild');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: chaincodeSpec
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    DevopsApi.prototype.chaincodeDeploy = function (chaincodeSpec) {
        var path = this.url + this.basePath + '/devops/deploy';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'chaincodeSpec' is set
        if (!chaincodeSpec) {
            throw new Error('Missing required parameter chaincodeSpec when calling chaincodeDeploy');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: chaincodeSpec
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    DevopsApi.prototype.chaincodeInvoke = function (chaincodeInvocationSpec) {
        var path = this.url + this.basePath + '/devops/invoke';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'chaincodeInvocationSpec' is set
        if (!chaincodeInvocationSpec) {
            throw new Error('Missing required parameter chaincodeInvocationSpec when calling chaincodeInvoke');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: chaincodeInvocationSpec
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    DevopsApi.prototype.chaincodeQuery = function (chaincodeInvocationSpec) {
        var path = this.url + this.basePath + '/devops/query';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'chaincodeInvocationSpec' is set
        if (!chaincodeInvocationSpec) {
            throw new Error('Missing required parameter chaincodeInvocationSpec when calling chaincodeQuery');
        }
        var useFormData = false;
        var deferred = promise.defer();
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: chaincodeInvocationSpec
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        request(requestOptions, function (error, response, body) {
            if (error) {
                deferred.reject(error);
            }
            else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                }
                else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });
        return deferred.promise;
    };
    return DevopsApi;
})();
exports.DevopsApi = DevopsApi;
